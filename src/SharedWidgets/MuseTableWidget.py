# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'formDialogWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

__all__ = ["MuseTableWidget"]

import sys
from enum import IntEnum

from PyQt5 import QtCore, QtWidgets

from src.SharedWidgets.MuseCalendarWidget import MuseCalendarWidget
from src.SharedWidgets.MuseComboBox import MuseComboBox
from src.SharedWidgets.MuseDataSource import StringEmitter


class MuseTableWidgetView(object):
    def setup_ui(self, table_widget: QtWidgets.QTableWidget, column_count, header_names: list[str]):
        table_widget.setStyleSheet("\n"
                                   "QTableWidgetItem {\n"
                                   "    font: 8pt \"Arial\";\n"
                                   "}\n"
                                   "\n"
                                   "QWidget {background-color: rgb(255, 245, 183);}\n"
                                   "\n"
                                   "QAbstractItemView {\n"
                                   "\n"
                                   "    font: 8pt \"Arial Black\";\n"
                                   "}\n"
                                   "\n"
                                   "QAbstractScrollArea {\n"
                                   "    \n"
                                   "    border-radius: 10px;\n"
                                   "}\n"
                                   "\n"
                                   " QScrollBar::handle:vertical {\n"
                                   "    background: #fac983\n"
                                   " }\n"
                                   "\n"
                                   "QScrollBar::handle:horizontal {\n"
                                   "    background: #fac983;\n"
                                   " }\n"
                                   "")
        table_widget.setColumnCount(column_count)
        for i in range(column_count):
            item: QtWidgets.QTableWidgetItem = QtWidgets.QTableWidgetItem()
            item.setText(header_names[i])
            table_widget.setHorizontalHeaderItem(i, item)


class MuseTableWidget(QtWidgets.QTableWidget, MuseTableWidgetView):
    class ItemType(IntEnum):
        varchar = 0
        enumType = 1
        dateType = 2

    def __init__(self, attributes: dict[str, ItemType], parent=QtCore.QObject):
        QtWidgets.QTableWidget.__init__(self, parent)
        self.__attributes_count = len(attributes.keys())
        self.setup_ui(self, self.__attributes_count, [name for name in attributes.keys()])
        self.__attributes_enums: dict[str, list[str]] = {}
        self.__attributes: dict[str, MuseTableWidget.ItemType] = attributes
        self.cellDoubleClicked.connect(self.identify_item_input)
        self.itemSelectionChanged.connect(self.close_item_input)

        self.__last_row = None
        self.__last_column = None

    def insertRow(self, row: int):
        QtWidgets.QTableWidget.insertRow(self, row)
        for i in range(self.__attributes_count):
            item: QtWidgets.QTableWidgetItem = QtWidgets.QTableWidgetItem()
            self.setItem(self.rowCount() - 1, i, item)

    def setItem(self, row: int, column: int, item: QtWidgets.QWidgetItem):
        attribute_type: MuseTableWidget.ItemType = self.__attributes[list(self.__attributes.keys())[column]]
        if attribute_type != MuseTableWidget.ItemType.varchar:
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
        QtWidgets.QTableWidget.setItem(self, row, column, item)

    def insert_attribute(self, attribute_name: str, attribute_type: ItemType, column: int = None):

        if column is None:
            column = self.__attributes_count
        QtWidgets.QTableWidget.insertColumn(self, column)
        item: QtWidgets.QTableWidgetItem = QtWidgets.QTableWidgetItem()
        item.setText(attribute_name)
        self.__attributes[attribute_name] = attribute_type
        self.setHorizontalHeaderItem(column, item)
        for i in range(self.rowCount()):
            item: QtWidgets.QTableWidgetItem = QtWidgets.QTableWidgetItem()
            if column != self.__attributes_count:
                column += 1
            self.setItem(i, column, item)
        self.__attributes_count += 1

    def set_attribute_values(self, name: str, values: list[str]):
        self.__attributes_enums[name] = values

    def get_attribute_type(self, key: str):
        return self.__attributes[key]

    def get_attribute_enums(self, key: str) -> list[str]:
        try:
            return self.__attributes_enums[key]
        except KeyError:
            return []

    def get_row_data(self, is_new_row: bool = True) -> list[tuple[str]]:
        result: list[tuple[str, MuseTableWidget.ItemType, str, list[str]]] = []
        column_count: int = self.columnCount()
        if is_new_row:
            for i in range(column_count):
                header: str = self.horizontalHeaderItem(i).text()
                result.append((header,
                               self.get_attribute_type(header),
                               "",
                               self.get_attribute_enums(header)
                               ))
            return result

        selected_row: int = self.currentRow()

        for i in range(column_count):
            header: str = self.horizontalHeaderItem(i).text()
            try:
                result.append((header,
                               self.get_attribute_type(header),
                               self.item(selected_row, i).text(),
                               self.get_attribute_enums(header)
                               ))
            except AttributeError:
                result.append((header,
                               self.get_attribute_type(header),
                               "",
                               self.get_attribute_enums(header)
                               ))
        return result

    def get_row_range(self):
        return [model_index.row() for model_index in self.selectionModel().selectedRows()]

    def identify_item_input(self):
        attribute_name = list(self.__attributes.keys())[self.currentColumn()]
        attribute = self.__attributes[attribute_name]
        self.__last_row = self.currentRow()
        self.__last_column = self.currentColumn()
        receive_data_signal = StringEmitter(None)
        receive_data_signal.signal.connect(self.receive_data)
        match attribute:
            case MuseTableWidget.ItemType.enumType:
                item_widget = MuseComboBox(QtCore.QRect(10, 10, 100, 100), parent_signal=receive_data_signal)
                possible_values = self.__attributes_enums[attribute_name][:]
                current_item_text: str = self.currentItem().text()
                if current_item_text != "":
                    current_text_index = possible_values.index(current_item_text)
                    first_value = possible_values[0][:]
                    possible_values[0] = current_item_text
                    possible_values[current_text_index] = first_value

                item_widget.addItems(possible_values)
                self.setCellWidget(self.currentRow(), self.currentColumn(), item_widget)
            case MuseTableWidget.ItemType.dateType:
                item_widget = MuseCalendarWidget(parent_signal=receive_data_signal)
                item_widget.resize(100, 100)
                self.setCellWidget(self.currentRow(), self.currentColumn(), item_widget)
                self.resizeRowToContents(self.currentRow())
                self.resizeColumnToContents(self.currentColumn())
            case _:
                pass

    def receive_data(self, data: str):
        self.setItem(self.__last_row, self.__last_column, QtWidgets.QTableWidgetItem(data))

    def close_item_input(self):
        if self.__last_column is None or self.__last_row is None:
            return
        if self.cellWidget(self.__last_row, self.__last_column) is not None:
            self.cellWidget(self.__last_row, self.__last_column).close()
        self.setCellWidget(self.__last_row, self.__last_column, None)
        self.resizeRowToContents(self.__last_row)
        self.resizeColumnToContents(self.__last_column)
        self.__last_column = None
        self.__last_row = None


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    w = MuseTableWidget({}, parent=None)

    w.insert_attribute("Фио", MuseTableWidget.ItemType.varchar)
    w.insert_attribute("Должность", MuseTableWidget.ItemType.enumType)
    w.insert_attribute("Дата рождения", MuseTableWidget.ItemType.dateType)
    w.insert_attribute("Номер телефона", MuseTableWidget.ItemType.varchar)
    w.set_attribute_values("Должность", ["Администратор", "Куратор", "Менеджер", "Экскурсовод"])
    w.set_attribute_values("Дата рождения", ["Администратор", "Куратор", "Менеджер", "Экскурсовод"])
    w.insertRow(w.rowCount())
    w.insertRow(w.rowCount())

    w.show()
    status = app.exec_()
    sys.exit(status)
