# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'formDialogWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

__all__ = ["MuseButton", "MuseLabel", "MuseLineEdit", "MuseDialog"]

import sys
from enum import IntEnum

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QDialog, QPushButton

from src.Emitters import TupleEmitter
from src.SharedWidgets.MuseComboBox import MuseComboBox
from src.SharedWidgets.MuseCalendarWidget import MuseCalendarWidget
from src.SharedWidgets.MuseDataSource import MuseDataSource, StringEmitter


class MuseButton(QPushButton, MuseDataSource):

    def __init__(self, text: str, parent: QtCore.QObject = None, parent_signal: StringEmitter = StringEmitter(None)):
        MuseDataSource.__init__(self)
        QPushButton.__init__(self, parent)
        self.__parent_signal = parent_signal
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(size_policy)
        self.setStyleSheet("QWidget {\n"
                           "    background-color: rgb(250, 234, 153);\n"
                           "    border: 1px solid rgb(250, 201, 131);\n"
                           "    border-radius: 10px;\n"
                           "    text-align: center;\n"
                           "}\n"
                           "\n"
                           "QAbstractButton {\n"
                           "    \n"
                           "    font: 87 8pt \"Arial Black\";\n"
                           "    color: rgb(82, 30, 1);\n"
                           "}\n"
                           "QPushButton:hover:!pressed {\n"
                           "  border: 2px solid rgb(250, 201, 131);\n"
                           "}")

        self.setMinimumSize(QtCore.QSize(len(text) * 8, 31))
        self.setMaximumSize(QtCore.QSize(16777215, 31))
        self.setText(text)

    def get_data(self) -> str:
        return self.text()

    def return_data_before_destroy(self):
        self.__parent_signal.signal.emit(self.get_data())


class MuseLineEdit(QtWidgets.QLineEdit, MuseDataSource):

    def __init__(self, parent: QtCore.QObject = None, parent_signal: StringEmitter = StringEmitter(None)):
        QtWidgets.QLineEdit.__init__(self, parent)
        self.__parent_signal = parent_signal
        self.setMinimumSize(QtCore.QSize(10, 31))
        self.setMaximumSize(QtCore.QSize(16777215, 31))
        self.setStyleSheet("QLineEdit {\n"
                           "    \n"
                           "    font: 8pt \"Arial\";\n"
                           "    padding-left: 10px;\n"
                           "    padding-right: 10px;\n"
                           "    background-color: rgb(250, 235, 180);\n"
                           "    border-radius: 10px;\n"
                           "}\n"
                           "\n"
                           "QLineEdit:focus {\n"
                           "  border: 2px solid rgb(250, 201, 131);\n"
                           "}")

    def get_data(self) -> str:
        return self.text()

    def return_data_before_destroy(self):
        self.__parent_signal.signal.emit(self.get_data())


class MuseLabel(QtWidgets.QLabel, MuseDataSource):
    def __init__(self, label_text: str, parent: QtCore.QObject = None,
                 parent_signal: StringEmitter = StringEmitter(None)):
        QtWidgets.QLabel.__init__(self, parent)
        self.__parent_signal = parent_signal
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.setMinimumSize(QtCore.QSize(8 * len(label_text), 40))
        self.setStyleSheet("QLabel {\n"
                           "    font: 87 8pt \"Arial Black\";\n"
                           "    color: rgb(82, 30, 1);\n"
                           "}")
        self.setText(label_text)

    def get_data(self) -> str:
        return self.text()

    def return_data_before_destroy(self):
        self.__parent_signal.signal.emit(self.get_data())


class MuseDialogView(object):

    def setup_ui(self, dialog_window: QDialog, size: QtCore.QSize):
        dialog_window.resize(size)
        dialog_window.setStyleSheet("QMenuBar {\n"
                                    "background-color: rgb(250, 234, 153);\n"
                                    "font: 87 10pt \"Arial Black\";\n"
                                    "padding-left: 3px;\n"
                                    "    color: rgb(82, 30, 1);\n"
                                    "}\n"
                                    "\n"
                                    "QMenuBar::item {\n"
                                    "spacing: 3px; /* spacing between menu bar items */\n"
                                    "padding: 1px 4px;\n"
                                    "background: transparent;\n"
                                    "border-radius: 4px;\n"
                                    "background-color: rgb(250, 234, 153);\n"
                                    "}\n"
                                    "\n"
                                    "QMenuBar::item:selected { /* when selected using mouse or keyboard */\n"
                                    "background: #fac983;\n"
                                    "}\n"
                                    "\n"
                                    "QMenu {\n"
                                    "background-color: rgb(149, 166, 174); \n"
                                    "    font: 75 8pt \"Arial Black\";\n"
                                    "}\n"
                                    "\n"
                                    "QMenu::item {\n"
                                    "background-color: transparent;\n"
                                    "}\n"
                                    "\n"
                                    "QMenu::item:selected {\n"
                                    "background-color: #fac983; /* rot */\n"
                                    "}\n"
                                    "QWidget{background-color: rgb(255, 253, 223);}")


class MuseDialog(QDialog, MuseDialogView):
    def __init__(self, size: QtCore.QSize, parent_signal: TupleEmitter):
        QDialog.__init__(self, None)
        self.setup_ui(self, size)
        self.__confirm_button = MuseButton("", self)
        self.__data_sources: list[MuseDataSource] = []
        self.__data_transfer = parent_signal
        self.__confirm_button.clicked.connect(self.__send_data)

    def __send_data(self):
        self.__data_transfer.signal.emit(tuple(data_source.get_data() for data_source in self.__data_sources))
        self.close()

    def get_confirm_button(self) -> QtWidgets.QPushButton:
        return self.__confirm_button

    def add_data_source(self, data_source: MuseDataSource):
        self.__data_sources.append(data_source)


class MuseTableWidgetView(object):
    def setup_ui(self, table_widget: QtWidgets.QTableWidget, column_count, header_names: list[str]):
        table_widget.setStyleSheet("\n"
                                   "QTableWidgetItem {\n"
                                   "    font: 8pt \"Arial\";\n"
                                   "}\n"
                                   "\n"
                                   "QWidget {background-color: rgb(255, 245, 183);}\n"
                                   "\n"
                                   "QAbstractItemView {\n"
                                   "\n"
                                   "    font: 8pt \"Arial Black\";\n"
                                   "}\n"
                                   "\n"
                                   "QAbstractScrollArea {\n"
                                   "    \n"
                                   "    border-radius: 10px;\n"
                                   "}\n"
                                   "\n"
                                   " QScrollBar::handle:vertical {\n"
                                   "    background: #fac983\n"
                                   " }\n"
                                   "\n"
                                   "QScrollBar::handle:horizontal {\n"
                                   "    background: #fac983;\n"
                                   " }\n"
                                   "")
        table_widget.setColumnCount(column_count)
        for i in range(column_count):
            item: QtWidgets.QTableWidgetItem = QtWidgets.QTableWidgetItem()
            item.setText(header_names[i])
            table_widget.setHorizontalHeaderItem(i, item)


class MuseTableWidget(QtWidgets.QTableWidget, MuseTableWidgetView):
    class ItemType(IntEnum):
        varchar = 0
        enumType = 1
        dateType = 2

    def __init__(self, attributes: dict[str, ItemType], parent=QtCore.QObject):
        QtWidgets.QTableWidget.__init__(self, parent)
        self.__attributes_count = len(attributes.keys())
        self.setup_ui(self, self.__attributes_count, [name for name in attributes.keys()])
        self.__attributes_enums: dict[str, list[str]] = {}
        self.__attributes: dict[str, MuseTableWidget.ItemType] = attributes
        self.cellDoubleClicked.connect(self.identify_item_input)
        self.itemSelectionChanged.connect(self.close_item_input)

        self.__last_row = None
        self.__last_column = None

    def insertRow(self, row: int):
        QtWidgets.QTableWidget.insertRow(self, row)
        for i in range(self.__attributes_count):
            item: QtWidgets.QTableWidgetItem = QtWidgets.QTableWidgetItem()
            self.setItem(self.rowCount() - 1, i, item)

    def setItem(self, row: int, column: int, item: QtWidgets.QWidgetItem):
        attribute_type: MuseTableWidget.ItemType = self.__attributes[list(self.__attributes.keys())[column]]
        if attribute_type != MuseTableWidget.ItemType.varchar:
            item.setFlags(item.flags() ^ QtCore.Qt.ItemIsEditable)
        QtWidgets.QTableWidget.setItem(self, row, column, item)

    def insert_attribute(self, attribute_name: str, attribute_type: ItemType, column: int = None):

        if column is None:
            column = self.__attributes_count
        QtWidgets.QTableWidget.insertColumn(self, column)
        item: QtWidgets.QTableWidgetItem = QtWidgets.QTableWidgetItem()
        item.setText(attribute_name)
        self.__attributes[attribute_name] = attribute_type
        self.setHorizontalHeaderItem(column, item)
        for i in range(self.rowCount()):
            item: QtWidgets.QTableWidgetItem = QtWidgets.QTableWidgetItem()
            if column != self.__attributes_count:
                column += 1
            self.setItem(i, column, item)
        self.__attributes_count += 1

    def set_attribute_values(self, name: str, values: list[str]):
        self.__attributes_enums[name] = values

    def identify_item_input(self):

        attribute_name = list(self.__attributes.keys())[self.currentColumn()]
        attribute = self.__attributes[attribute_name]
        self.__last_row = self.currentRow()
        self.__last_column = self.currentColumn()
        receive_data_signal = StringEmitter(None)
        receive_data_signal.signal.connect(self.receive_data)
        match attribute:
            case MuseTableWidget.ItemType.enumType:
                item_widget = MuseComboBox(QtCore.QRect(10, 10, 100, 100), parent_signal=receive_data_signal)
                item_widget.addItems(self.__attributes_enums[attribute_name])
                self.setCellWidget(self.currentRow(), self.currentColumn(), item_widget)
            case MuseTableWidget.ItemType.dateType:
                item_widget = MuseCalendarWidget(parent_signal=receive_data_signal)
                item_widget.resize(100, 100)
                self.setCellWidget(self.currentRow(), self.currentColumn(), item_widget)
                self.resizeRowToContents(self.currentRow())
                self.resizeColumnToContents(self.currentColumn())
            case _:
                pass

    def receive_data(self, data: str):
        self.setItem(self.__last_row, self.__last_column, QtWidgets.QTableWidgetItem(data))

    def close_item_input(self):
        if self.__last_column is None or self.__last_row is None:
            return
        self.setCellWidget(self.__last_row, self.__last_column, None)
        self.resizeRowToContents(self.__last_row)
        self.resizeColumnToContents(self.__last_column)
        self.__last_column = None
        self.__last_row = None


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    w = MuseTableWidget({}, parent=None)

    # {"Фио": MuseTableWidget.ItemType.varchar,
    #  "Должность": MuseTableWidget.ItemType.enumType,
    #  "Дата рождения": MuseTableWidget.ItemType.dateType}
    w.insert_attribute("Фио", MuseTableWidget.ItemType.varchar)
    w.insert_attribute("Должность", MuseTableWidget.ItemType.enumType)
    w.insert_attribute("Дата рождения", MuseTableWidget.ItemType.dateType)
    w.insert_attribute("Номер телефона", MuseTableWidget.ItemType.varchar)
    w.set_attribute_values("Должность", ["Администратор", "Куратор", "Менеджер", "Экскурсовод"])
    w.set_attribute_values("Дата рождения", ["Администратор", "Куратор", "Менеджер", "Экскурсовод"])
    w.insertRow(w.rowCount())
    w.insertRow(w.rowCount())


    w.show()
    status = app.exec_()
    sys.exit(status)
